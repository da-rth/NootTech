import base64
import uuid
import json
import os.path
from os.path import splitext
from hurry.filesize import size
from pathlib import Path
from string import ascii_uppercase, ascii_lowercase
from django.utils.http import int_to_base36
DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
all_chars = "".join(['1234567890-_=$', ascii_uppercase, ascii_lowercase])
ID_LENGTH = 9


def get_id_gen() -> str:
    """
    Generates random string whose length is `ID_LENGTH`
    https://stackoverflow.com/a/53023895
    """
    return int_to_base36(uuid.uuid4().int)[:8]


def get_ext(filename):
    return "".join(Path(filename).suffixes)


def get_upload_key():
    """
    Generates a randomised upload key for a user.
    This key is used for authenticating remote uploads (cURL, ShareX) instead of exposing user password.
    :return: String - randomly generate string of 24 characters
    """
    key = base64.b64encode(uuid.uuid4().bytes).decode("utf-8")
    return key[:24] if len(key) > 24 else key


def get_file_path(instance, filename):
    """
    :param instance: - Used for getting the current instance (file upload) uploader id for filepath creation
    :param filename: - The name of the file to be added to path
    :return: - String: the complete relative file-path (from Media dir) for an uploaded file
    """
    return f'{instance.user.id}/{filename}'


def get_thumb_path(instance, filename):
    """
    :param instance: - Used for getting the current instance (file upload) uploader id for filepath thumbnail creation
    :param filename: - The name of the file to be added to thumbnail path (thumbnail generated by easy_thimbnails)
    :return: - String: the complete relative thumbnail file-path (from Media dir) for an uploaded file
    """
    path = f'{instance.user.id}/Thumb_{filename}'
    return path


def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip


def is_websafe(ext):
    web_safe = [
        ".png", ".jpg", ".jpeg", ".gif", ".svg", ".bmp", ".ico",
        ".webm", ".mp4", ".ogg", ".oggv", ".ogga", ".flac", ".wav"
    ]
    if ext.lower() in web_safe:
        return True
    else:
        return False


def get_filesize_str(size_bytes):
    """
    :param size_bytes: - size of a file in bytes
    :return: - String: filesize converted to KB, MB, GB...
    """
    return size(size_bytes)


def get_fontawesome(mimetype, ext):
    mimes = json.load(open(os.path.join(DIR, 'backendAPI/utils/fa_mimetypes.json')))
    if ext in mimes["codeTypes"]:
        return "fas fa-code"
    elif ext in mimes["fontTypes"]:
        return "fas fa-font"
    elif ext in mimes["otherTypes"]:
        return mimes["otherTypes"][ext]
    else:
        mimetype = mimetype.split('/')
        if mimetype[0] in mimes:
            print(mimetype[0])
            if isinstance(mimes[mimetype[0]], str):
                return mimes[mimetype[0]]
            if mimetype[1] in mimes[mimetype[0]]:
                return mimes[mimetype[0]][mimetype[1]]
        icon = "fas fa-file"
    return icon


def get_syntax_highlighting(ext, mimetype):
    ext = ext.split(".")[-1]
    hljs = json.load(open(os.path.join(DIR, 'backendAPI/utils/hljs.json')))
    print(hljs)
    ftype = mimetype.split("/")[1].lower()
    print(ext, ftype)

    if ext.lower() in hljs:
        return hljs[ext.lower()]
    elif ftype in hljs:
        return hljs[ftype]
    else:
        return ""


def get_chars_lines(filename):
    with open(filename) as f:
        fr = f.readlines()
        chars = sum([len(i) - 1 for i in fr])
        lines = len(fr)
    return chars, lines
