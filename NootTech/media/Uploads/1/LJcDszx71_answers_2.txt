--------------------------------------------------------------------------------
    LAB 03                                                      BASH SCRIPTING
--------------------------------------------------------------------------------

    Answer all questions for Lab03 in this file. Questions or tasks which 
    require you to edit another file have the name of the file already 
    entered for you.

--------------------------------------------------------------------------------
    QUESTIONS
--------------------------------------------------------------------------------

------------------
    QUESTION 1 
------------------

Provide a Task1.sh							[5]

#!/bin/bash

# Task 1
# Author: 2086380A
# Physics 2T - Linux Lab 4
# 24/02/2019

# Iterate through files in current directory and prompt user to delete those of file size 0.


echo "Checking current directory for empty files: $(pwd)"

# Loop through all files/dirs in current path
for file in *; do

	# Check if iterated item is both a file and of size 0 
	if [ ! -s $file ] && [ -f $file ]; then
		# Use printf to print newline charactersi
		printf "\nFound file '$file' with size zero (0)."
		printf "\nWould you like to delete it? (y/n)\n"

		# Get choice from user 
		read choice

		echo ""
		
		# If choice is 'y' then delete file, else assume user doesn't want to delete it.
		if [ $choice == "y" ]; then
			echo "Ok! Deleted $file!"
			rm -rf $file	
		else
			echo "Ok! Left $file as it was!"
		fi
	fi
done

echo "All empty files resolved! Good bye! :)"
# end

------------------
    QUESTION 2 
------------------

Provide a Task2.sh							[6]


#!/bin/bash

# Task 2
# Author: 2086380A
# Physics 2T - Linux Lab 4
# 24/02/2019

# This script outputs the number of lines in help-read.txt


# Variables
linenum=1                 # The starting line number to increment
filename=help-read.txt    # The file to get wordcounts for


# Print total number of lines in the file
echo "$filename has `cat $filename | wc -l` lines:"

# Loop through each line in file
while read line
do
	# Print the wordcount of the line
	echo "- Line $linenum wordcount: `echo $line | wc -w`"
	# Increment linenum by 1...
	(( linenum++ ))
done < $filename

# end


------------------
    QUESTION 3 
------------------

Provide a Task3.sh							[5]


#!/bin/bash

# Task 3
# Author: 2086380A
# Physics 2T - Linux Lab 4
# 24/02/2019

# This script takes a path as a parameter, creates it if it doesn't exist and then will cd into it.

enter_dir() {
	# Check if argument passed by user is a directory. If not, create a new directory!
	if [ -d $1 ]; then
		echo "$1 already exists!"
	else
		echo "Created new directory: $1"
	fi
	
	# Change directory to path specified by user
	echo "Moving into directory: $1"
	cd $1

	# Executes bash to enter directory
	# Also needed for those using non-Bourne Again Shells (zsh, fish) so directory is entered.
	exec bash
}

# If user hasn't passed additional parameters to script, notify them of script usage. Else, proceed.
if [ -z "$1" ]; then
	echo "You must a directory as a parameter to use this script..."
	echo "- Example usage: ${0} /path/to/dir"
	exit 1
else
	enter_dir $1
fi


------------------
    QUESTION 4
------------------

Provide a Task4.sh							[7]

#!/bin/bash

# Task 4
# Author: 2086380A
# Physics 2T - Linux Lab 4
# 24/02/2019

# This script takes a path as a parameter, checks if it is a file, directory or doesn't exist.


check_filepath() {
	echo "Results:" 
	# Iterate through arguments passed by user
	for filedir in "$@"; do
		# Check if argument is a file or directory. Else, it doesn't exist!
		if [ -f $filedir ]; then
                	echo "- \"$filedir\" is a file!"
		elif [ -d $filedir ]; then
			echo "- \"$filedir\" is a directory!"
		else
			echo "- \"$filedir\" does not exist!"
        	fi
	done

}

# If user hasn't passed additional parameters to script, notify them of script usage. Else, proceed.
if [ -z "$1" ]; then
	echo "You must a file or directory as a parameter to use this script..."
	echo "- Example usage: ${0} /path/to/dir /path/to/file..."
	exit 1
else
	# Pass ALL parameters entered by user to check_filepath function
	check_filepath "$@"
fi



------------------
    QUESTION 5 
------------------

Provide a Task5.sh							[20]


#!/bin/bash

# Task 5
# Author: 2086380A
# Physics 2T - Linux Lab 5
# 24/02/2019

# This script outputs the decoded first and last lines of all files found in the current path's `data` directory.

process() {
	# Function takes in a parameter (base64 encoded string), decodes and prints it.
	echo $1 | base64 -d
}

check_filepath() {
	# Function checks if all parameters are files. If so, decode the first and last lines of those files.
	
	printf "\nStarting decoder...\n\n"
	
	# If data directory doesn't exist, exit
	if [ ! -d "data" ]; then
		echo "Data directory does not exist :("
		exit 1
	fi
	
	# Loop through all parameters entered by user and check if file doesn't exist or is a directory.
	# Else, decode...
	for filename in "$@"; do
		if [ ! -f "data/$filename" ]; then
			echo "ERROR: The file \"$filename\" does not exist in the data directory!"
			exit 2
		elif [ -d "data/$filename" ]; then
			echo "ERROR: \"$filename\" is a directory and cannot be decoded!"
			exit 2
		else
			echo "OK: Decoding first and last lines of \"$filename\"..."
			echo "- First Line (Decoded): `process $(head -n 1 data/$filename)`"
			echo "- Last Line (Decoded): `process $(tail -n 1 data/$filename)`"
		fi
		printf "\n"
	done
	
	# Exit successfully
	echo "All files decoded. Goodbye! :)"
	exit 0
}

# If user hasn't passed additional parameters to script, notify them of script usage. Else, proceed.
if [ -z "$1" ]; then
	echo "You must a filename to decode as a parameter to use this script..."
	echo "- Example usage: ${0} encoded_filename1 encoded_filename2..."
	exit 1
else
	# Pass ALL parameters entered by user to check_filepath function
	check_filepath "$@"
fi



--------------------------------------------------------------------------------
    FINISHED LAB 04                                             MARKS: XX/40
--------------------------------------------------------------------------------
