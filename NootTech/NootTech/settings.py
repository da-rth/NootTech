"""
Django settings for NootTech project.

Generated by 'django-admin startproject' using Django 1.11.17.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os, datetime
import json

GENERAL_SETTINGS = json.load(open("frontend/src/config.json"))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
VT_API_KEY = 'cce2a338c4f46b082ab39a88076aa4ab2f8f8da5d850a7e6814e052f75f0d3a0'
SECRET_KEY = '8lixf+hs1+go!pu#cg95dwpr7ye!kx^zi2(-7$bciyiq#^fir#'

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True
SUBDOMAIN = GENERAL_SETTINGS["ENABLE_SUBDOMAINS"]
ALLOWED_HOSTS = []
DOMAIN_NAME = GENERAL_SETTINGS["BACKEND_URL"]
HTTPS = GENERAL_SETTINGS["HTTPS"]

#if not DEBUG: # Disable email system while debugging
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.noot.tech'
EMAIL_HOST_PASSWORD='ADD_PASSWORD_HERE'
EMAIL_HOST_USER='info@noot.tech'
EMAIL_PORT = 587
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'admin_reorder',
    'corsheaders',
    'easy_thumbnails',
    'rest_framework',
    'backendAPI',
    'webpack_loader',
]

FILE_UPLOAD_HANDLERS = ("django.core.files.uploadhandler.TemporaryFileUploadHandler",)


THUMBNAIL_SOURCE_GENERATORS = (
    'easy_thumbnails.source_generators.pil_image',
    'easy_thumbnails_ffmpeg.source_generators.ffmpeg_frame',
)


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
]

CORS_ORIGIN_REGEX_WHITELIST = (
    r'^https?://127.0.0.1:8080$',
    r'^https?://127.0.0.1:8000$',
    r'^https?://'+DOMAIN_NAME+'$',
    r'^https?://'+DOMAIN_NAME.replace(':8000',':8080')+'$',
)

ADMIN_REORDER = (
    # Reorder app models
    {'app': 'auth', 'label': 'User Management', 'models': (
        'backendAPI.User',
        'auth.Group',
    )},

    {'app': 'backendAPI', 'label': 'Moderation', 'models': (
        'backendAPI.ReportedFile',
        'backendAPI.Warned',
        'backendAPI.BannedUser',
    )},

    # models with custom name
    {'app': 'backendAPI', 'label': 'File Management', 'models': (
        'backendAPI.File',
        'backendAPI.VirusTotalScan',
        'backendAPI.FavouritedFile',
        'backendAPI.Image',
        'backendAPI.Audio',
        'backendAPI.Video',
        'backendAPI.Text',
    )},

    {'app': 'backendAPI', 'label': 'Extra', 'models': (
        'backendAPI.ErrorVideo',
    )},
)

WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        'BUNDLE_DIR_NAME': 'bundles/',
        'STATS_FILE': os.path.join(BASE_DIR, 'frontend/webpack-stats.json'),
        'POLL_INTERVAL': 0.1,
        'TIMEOUT': None,
        'IGNORE': ['_+\.hot-update.js', '_+\.map']
    }
}

ROOT_URLCONF = 'NootTech.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NootTech.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS' : {
            "min_length" : 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'backendAPI.validators.NumberValidator',
    },
    {
        'NAME': 'backendAPI.validators.UppercaseValidator',
    },
    {
        'NAME': 'backendAPI.validators.LowercaseValidator',
    },



]

AUTH_USER_MODEL = 'backendAPI.User'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=3),
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'logging.NullHandler',
        },
        'UserActivity': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR + "/UserActivity.log",
            'maxBytes': 50000,
            'backupCount': 2,
            'formatter': 'standard',
        },
        'console':{
            'level':'INFO',
            'class':'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'django': {
            'handlers':['console'],
            'propagate': True,
            'level':'WARN',
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'backendAPI': {
            'handlers': ['console', 'UserActivity'],
            'level': 'DEBUG',
        },
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-gb'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'frontend/dist'),
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
